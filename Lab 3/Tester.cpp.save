#include <stdio.h>
#include "Heap_Sort.h"
#include "Merge_Sort.h"
#include "SD_Sorts.h"
#include "Testing.h"
#include "Q_Sort.h"
#include "Quadratic_Sort.h"

int main() {
    //testing("C:\\Users\\PC\\Desktop\\Algorithms_2sem\\Lab 3\\small_tests", Bubble_Sort,
    //      "C:\\Users\\PC\\Desktop\\Algorithms_2sem\\Lab 3\\Bubble_Sort.out", 50, 1000, 50);
    //testing("C:\\Users\\PC\\Desktop\\Algorithms_2sem\\Lab 3\\small_tests", Selection_Sort,
    //        "C:\\Users\\PC\\Desktop\\Algorithms_2sem\\Lab 3\\Selection_Sort.out", 50, 1000, 50);
    //testing("C:\\Users\\PC\\Desktop\\Algorithms_2sem\\Lab 3\\small_tests", Insertion_Sort,
    //        "C:\\Users\\PC\\Desktop\\Algorithms_2sem\\Lab 3\\Insertion_Sort.out", 50, 1000, 50);
    //testing("C:\\Users\\PC\\Desktop\\Algorithms_2sem\\Lab 3\\small_tests", Shell_Sort,
    //        "C:\\Users\\PC\\Desktop\\Algorithms_2sem\\Lab 3\\Shell_Sort.out", 50, 1000, 50);
    //testing("C:\\Users\\PC\\Desktop\\Algorithms_2sem\\Lab 3\\big_tests", Heap_Sort_2,
    //       "C:\\Users\\PC\\Desktop\\Algorithms_2sem\\Lab 3\\Heap_Sort_2.out", 10000, 1000000, 10000);
    //testing("C:\\Users\\PC\\Desktop\\Algorithms_2sem\\Lab 3\\big_tests", Heap_Sort_3,
    //        "C:\\Users\\PC\\Desktop\\Algorithms_2sem\\Lab 3\\Heap_Sort_3.out", 10000, 1000000, 10000);
    //testing("C:\\Users\\PC\\Desktop\\Algorithms_2sem\\Lab 3\\big_tests", Heap_Sort_4,
    //        "C:\\Users\\PC\\Desktop\\Algorithms_2sem\\Lab 3\\Heap_Sort_4.out", 10000, 1000000, 10000);
    //testing("C:\\Users\\PC\\Desktop\\Algorithms_2sem\\Lab 3\\big_tests", Heap_Sort_5,
    //        "C:\\Users\\PC\\Desktop\\Algorithms_2sem\\Lab 3\\Heap_Sort_5.out", 10000, 1000000, 10000);
    //testing("C:\\Users\\PC\\Desktop\\Algorithms_2sem\\Lab 3\\big_tests", Heap_Sort_6,
    //        "C:\\Users\\PC\\Desktop\\Algorithms_2sem\\Lab 3\\Heap_Sort_6.out", 10000, 1000000, 10000);
    //testing("C:\\Users\\PC\\Desktop\\Algorithms_2sem\\Lab 3\\big_tests", Heap_Sort_7,
    //        "C:\\Users\\PC\\Desktop\\Algorithms_2sem\\Lab 3\\Heap_Sort_7.out", 10000, 1000000, 10000);
    //testing("C:\\Users\\PC\\Desktop\\Algorithms_2sem\\Lab 3\\big_tests", Heap_Sort_8,
    //        "C:\\Users\\PC\\Desktop\\Algorithms_2sem\\Lab 3\\Heap_Sort_8.out", 10000, 1000000, 10000);
    //testing("C:\\Users\\PC\\Desktop\\Algorithms_2sem\\Lab 3\\big_tests", Heap_Sort_9,
    //        "C:\\Users\\PC\\Desktop\\Algorithms_2sem\\Lab 3\\Heap_Sort_9.out", 10000, 1000000, 10000);
    //testing("C:\\Users\\PC\\Desktop\\Algorithms_2sem\\Lab 3\\big_tests", Heap_Sort_10,
    //        "C:\\Users\\PC\\Desktop\\Algorithms_2sem\\Lab 3\\Heap_Sort_10.out", 10000, 1000000, 10000);
    //testing("C:\\Users\\PC\\Desktop\\Algorithms_2sem\\Lab 3\\big_tests", Recursive_Merge_Sort,
    //        "C:\\Users\\PC\\Desktop\\Algorithms_2sem\\Lab 3\\Recursive_Merge_Sort.out", 10000, 1000000, 10000);
    //testing("C:\\Users\\PC\\Desktop\\Algorithms_2sem\\Lab 3\\big_tests", Iterative_Merge_Sort,
    //       "C:\\Users\\PC\\Desktop\\Algorithms_2sem\\Lab 3\\Iterative_Merge_Sort.out", 10000, 1000000, 10000);
    //testing("C:\\Users\\PC\\Desktop\\Algorithms_2sem\\Lab 3\\big_tests", Lomuto_Mid_Q_Sort,
    //        "C:\\Users\\PC\\Desktop\\Algorithms_2sem\\Lab 3\\Lomuto_Mid_Q_Sort.out", 10000, 1000000, 10000);
    //testing("C:\\Users\\PC\\Desktop\\Algorithms_2sem\\Lab 3\\big_tests", Hoar_Mid_Q_Sort,
    //        "C:\\Users\\PC\\Desktop\\Algorithms_2sem\\Lab 3\\Hoar_Mid_Q_Sort.out", 10000, 1000000, 10000);
    //testing("C:\\Users\\PC\\Desktop\\Algorithms_2sem\\Lab 3\\big_tests", Fat_Mid_Q_Sort,
    //        "C:\\Users\\PC\\Desktop\\Algorithms_2sem\\Lab 3\\Fat_Mid_Q_Sort.out", 10000, 1000000, 10000);
    //testing("C:\\Users\\PC\\Desktop\\Algorithms_2sem\\Lab 3\\test_most_dublicates", Lomuto_Mid_Q_Sort,
    //        "C:\\Users\\PC\\Desktop\\Algorithms_2sem\\Lab 3\\Lomuto_Mid_Q_Sort_dublicates.out", 10000, 1000000, 10000);
    //testing("C:\\Users\\PC\\Desktop\\Algorithms_2sem\\Lab 3\\test_most_dublicates", Hoar_Mid_Q_Sort,
    //        "C:\\Users\\PC\\Desktop\\Algorithms_2sem\\Lab 3\\Hoar_Mid_Q_Sort_dublicates.out", 10000, 1000000, 10000);
    //testing("C:\\Users\\PC\\Desktop\\Algorithms_2sem\\Lab 3\\test_most_dublicates", Fat_Mid_Q_Sort,
    //        "C:\\Users\\PC\\Desktop\\Algorithms_2sem\\Lab 3\\Fat_Mid_Q_Sort_dublicates.out", 10000, 1000000, 10000);
    //testing("C:\\Users\\PC\\Desktop\\Algorithms_2sem\\Lab 3\\big_tests", Hoar_Median_Q_Sort,
    //        "C:\\Users\\PC\\Desktop\\Algorithms_2sem\\Lab 3\\Hoar_Median_Q_Sort.out", 10000, 1000000, 10000);
    //testing("C:\\Users\\PC\\Desktop\\Algorithms_2sem\\Lab 3\\big_tests", Hoar_Rand_Q_Sort,
    //        "C:\\Users\\PC\\Desktop\\Algorithms_2sem\\Lab 3\\Hoar_Rand_Q_Sort.out", 10000, 1000000, 10000);
    //testing("C:\\Users\\PC\\Desktop\\Algorithms_2sem\\Lab 3\\big_tests", Hoar_Rand_Median_Q_Sort,
    //        "C:\\Users\\PC\\Desktop\\Algorithms_2sem\\Lab 3\\Hoar_Rand_Median_Q_Sort.out", 10000, 1000000, 10000);
    //testing("C:\\Users\\PC\\Desktop\\Algorithms_2sem\\Lab 3\\big_tests", LSD_Sort,
    //        "C:\\Users\\PC\\Desktop\\Algorithms_2sem\\Lab 3\\LSD_Sort.out", 10000, 1000000, 10000);
    //testing("C:\\Users\\PC\\Desktop\\Algorithms_2sem\\Lab 3\\big_tests", MSD_Sort,
    //       "C:\\Users\\PC\\Desktop\\Algorithms_2sem\\Lab 3\\MSD_Sort.out", 10000, 1000000, 10000);

    printf("OK");
}
